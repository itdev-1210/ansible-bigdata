# Set everything to be logged to the console
#log4j.rootCategory=INFO, cosole
log4j.rootCategory={{ spark_comm_log4j_rootCategory }}
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.target=System.err
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n

# Settings to quiet third party logs that are too verbose
log4j.logger.org.spark-project.jetty=WARN
log4j.logger.org.spark-project.jetty.util.component.AbstractLifeCycle=ERROR
log4j.logger.org.apache.spark.repl.SparkIMain$exprTyper=INFO
log4j.logger.org.apache.spark.repl.SparkILoop$SparkILoopInterpreter=INFO
log4j.logger.org.apache.parquet=ERROR
log4j.logger.parquet=ERROR

# SPARK-9183: Settings to avoid annoying messages when looking up nonexistent UDFs in SparkSQL with Hive support
log4j.logger.org.apache.hadoop.hive.metastore.RetryingHMSHandler=FATAL
log4j.logger.org.apache.hadoop.hive.ql.exec.FunctionRegistry=ERROR

# RollingFIleAppender
log4j.appender.rolling=org.apache.log4j.RollingFileAppender
log4j.appender.rolling.File=${spark.yarn.app.container.log.dir}/{{ spark_comm_log4j_filename }}
log4j.appender.rolling.layout=org.apache.log4j.PatternLayout
log4j.appender.rolling.layout.ConversionPattern={{ spark_comm_log4j_ConversionPattern }}
log4j.appender.rolling.MaxFileSize={{ spark_comm_log4j_MaxFileSize }}
log4j.appender.rolling.MaxBackupIndex={{ spark_comm_log4j_MaxBackupIndex }}
